# MMMS_START: Initializes the 3MS to the provided INITIAL_TOOL. Use in your PRINT_START macro.
[gcode_macro MMMS_START]
gcode:
  CLEAR_TOOL
  {% set initial_tool = params.INITIAL_TOOL|int %}
  {% set fsensor_delay = printer["gcode_macro MMMS_SETTINGS"].fsensor_delay|int %}
  M118 3MS Start 
  M118    Initial Tool: T{initial_tool}
  CHECK_FSENSOR V=0 MSG="Please unload filament and resume."
  SYNC_TOOL TOOL={initial_tool}
  MMMS_LOAD
  G4 P{fsensor_delay}
  CHECK_FSENSOR V=1 MSG="Please load T{initial_tool} and resume."
  SAVE_VARIABLE VARIABLE=p VALUE={initial_tool}

# MMMS_END: Unloads the 3MS. Use in your PRINT_END macro.
[gcode_macro MMMS_END]
gcode:
  {% set current_tool = printer.save_variables.variables.p|default(-1)|int %}
  {% set fsensor_delay = printer["gcode_macro MMMS_SETTINGS"].fsensor_delay|int %}
  CLEAR_TOOL
  M118 3MS End
  {% if current_tool > -1 %}
    SYNC_TOOL TOOL={current_tool}
    MMMS_UNLOAD
    G4 P{fsensor_delay}
  {% endif %}
  CHECK_FSENSOR V=0 MSG="Please unload T{current_tool} and resume."

# Unloads 3MS by provided/default DISTANCE, SPEED, in 50mm increments
[gcode_macro MMMS_UNLOAD]
gcode:
  {% set distance = params.DISTANCE|default(printer["gcode_macro MMMS_SETTINGS"].unload_distance)|int %}
  {% set speed = params.SPEED|default(printer["gcode_macro MMMS_SETTINGS"].unload_speed)|int %}
  {% set step_size = printer["gcode_macro MMMS_SETTINGS"].step_size %}
  {% set times = (distance // step_size)|int %}
  M83
  {% for _ in range(times) %}
    G1 E-{step_size} F{speed}
  {% endfor %}
  G1 E-{distance - (times * step_size)} F{speed}

# Loads 3MS by provided/default DISTANCE, SPEED, in 50mm incremenents
[gcode_macro MMMS_LOAD]
gcode:
  {% set distance = params.DISTANCE|default(printer["gcode_macro MMMS_SETTINGS"].load_distance)|int %}
  {% set speed = params.SPEED|default(printer["gcode_macro MMMS_SETTINGS"].load_speed)|int %}
  {% set step_size = printer["gcode_macro MMMS_SETTINGS"].step_size %}
  {% set times = (distance // step_size)|int %}
  M83
  {% for _ in range(times) %}
    G1 E{step_size} F{speed}
  {% endfor %}
  G1 E{distance - (times * step_size)} F{speed}

[gcode_macro Toolchange]
gcode:
  {% set p = printer.save_variables.variables.p|default(-1)|int %}
  {% set fsensor_delay = printer["gcode_macro MMMS_SETTINGS"].fsensor_delay|int %}
  {% set t = params.T|int %}
  M118 T{p} -> T{t}
  {% if p != t %}
    {% if p > -1 %}
      DISABLE_FSENSOR
      G4 P{fsensor_delay}
      MMMS_UNLOAD
      G4 P{fsensor_delay}
      ENABLE_FSENSOR
      G4 P{fsensor_delay}
      CHECK_FSENSOR V=0 MSG="Please unload T{p} and resume." R=-1
      DESYNC_TOOL TOOL={p}
    {% endif %}
    SYNC_TOOL TOOL={t}
    DISABLE_FSENSOR
    G4 P{fsensor_delay}
    MMMS_LOAD
    G4 P{fsensor_delay}
    ENABLE_FSENSOR
    G4 P{fsensor_delay}
    CHECK_FSENSOR V=1 MSG="Please load T{t} and resume." R=1
  {% endif %}
  SAVE_VARIABLE VARIABLE=p VALUE={t}

[gcode_macro ENABLE_FSENSOR]
gcode:
  SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=1

[gcode_macro DISABLE_FSENSOR]
gcode:
  SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=0

# Check filament sensor "fsensor" to match with provided V. Else notify the user and PAUSE.
[gcode_macro CHECK_FSENSOR]
gcode:
  {% set v = params.V|int %}
  {% set msg = params.MSG|string %}
  {% set r = params.R|default(0)|int %}
  {% set retry_dist = printer["gcode_macro MMMS_SETTINGS"].retry_dist %}
  {% set retry_speed = printer["gcode_macro MMMS_SETTINGS"].retry_speed %}
  {% set fsensor_delay = printer["gcode_macro MMMS_SETTINGS"].fsensor_delay %}
  {% set m117 = msg or "Sensor Check Fail" %}
  {% if (printer["filament_switch_sensor fsensor"].filament_detected|int) != v %}
    {% if r != 0 %}
      M117 Retry
      M83
      G1 E{r*retry_dist} F{retry_speed}
      G4 P{fsensor_delay}
      CHECK_FSENSOR V={v} MSG="{msg}"
    {% endif %}
    
    M117 {m117}
    PAUSE
  {% endif %}

# Set the sync of provided TOOL to SYNC with extruder
[gcode_macro SET_TOOL_SYNC]
gcode:
  {% set tool = params.TOOL|int %}
  {% set sync = params.SYNC|int %}
  {% set motion_queue = "extruder" if sync == 1 else "" %}
  SYNC_EXTRUDER_MOTION EXTRUDER=3ms{ tool } MOTION_QUEUE={ motion_queue }

# Desync all tools, then sync provided TOOL to extruder
[gcode_macro SYNC_TOOL]
gcode:
  {% set tool = params.TOOL|int %}
  {% set num_tools = printer["gcode_macro MMMS_SETTINGS"].num_tools|int %}
  {% for t in range(num_tools) %}
    {% if t != tool %}
      DESYNC_TOOL TOOL={t}
    {% endif %}
  {% endfor %}
  SET_TOOL_SYNC TOOL={tool} SYNC=1

# Sync to current tool on Klipper startup
[delayed_gcode sync_startup]
initial_duration: 1.
gcode:
  {% set p = printer.save_variables.variables.p|default(-1)|int %}
  {% if p > -1 %}
    SYNC_TOOL TOOL={p}
  {% else %}
    DESYNC_ALL_TOOLS
  {% endif %}

# Desync provided TOOL from the extruder
[gcode_macro DESYNC_TOOL]
gcode:
  {% set tool = params.TOOL|int %}
  SET_TOOL_SYNC TOOL={tool} SYNC=0

# Set previous to -1 (no filament loaded)
[gcode_macro CLEAR_TOOL]
gcode:
  SAVE_VARIABLE VARIABLE=p VALUE=-1

# Desync all tools from the extruder
[gcode_macro DESYNC_ALL_TOOLS]
gcode:
  {% set num_tools = printer["gcode_macro MMMS_SETTINGS"].num_tools|int %}
  {% for tool in range(num_tools) %}
    DESYNC_TOOL TOOL={tool}
  {% endfor %}

# Alias for Toolchange T=0
[gcode_macro T0]
gcode:
  Toolchange T=0

# Alias for Toolchange T=1
[gcode_macro T1]
gcode:
  Toolchange T=1

### Uncomment below if more than two tools

# # Alias for Toolchange T=2
# [gcode_macro T2]
# gcode:
#   Toolchange T=2

# # Alias for Toolchange T=3
# [gcode_macro T3]
# gcode:
#   Toolchange T=3
