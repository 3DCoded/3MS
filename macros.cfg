### --- NOTIFICATIONS/PROMPTS --- ###

[gcode_macro WEB_PROMPT]
gcode:
  {% set p = printer.save_variables.variables.p|int %}
  RESPOND TYPE=command MSG="action:prompt_begin {params.TITLE}"
  RESPOND TYPE=command MSG="action:prompt_text {params.MESSAGE}"
  RESPOND TYPE=command MSG="action:prompt_text See {params.LINK}"
  RESPOND TYPE=command MSG="action:prompt_button_group_start"
  RESPOND TYPE=command MSG="action:prompt_button Sync T{p}|SYNC_TOOL TOOL={p}|info"
  RESPOND TYPE=command MSG="action:prompt_button Sync T{params.T}|SYNC_TOOL TOOL={params.T}|info"
  RESPOND TYPE=command MSG="action:prompt_button_group_end"
  RESPOND TYPE=command MSG="action:prompt_button_group_start"
  RESPOND TYPE=command MSG="action:prompt_button Resume|RESUME|warning"
  RESPOND TYPE=command MSG="action:prompt_button_group_end"
  RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro MOBILE_NOTIFY]
gcode:
  MR_NOTIFY TITLE="{params.TITLE}" MESSAGE="{params.MESSAGE} {params.LINK}"

[gcode_macro MMMS_NOTIFY]
gcode:
  {% set t = params.T|string %}
  {% set p = printer.save_variables.variables.p|string %}
  {% set fail_type = params.TYPE %}
  {% if fail_type == "UNLOAD" %}
    {% set title = "3MS Unload Fail" %}
    {% set message = "Please unload T"+p+", load T"+t+", and resume." %}
    {% set link = "https://is.gd/3msunload" %}
  {% elif fail_type == "LOAD" %}
    {% set title = "3MS Load Fail" %}
    {% set message = "Please load T"+t+" and resume." %}
    {% set link = "https://is.gd/3msload" %}
  {% else %}
    {% set title = "3MS Error" %}
    {% set message = "Unknown error" %}
    {% set link = "https://is.gd/3mstrouble" %}
  {% endif %}
  MOBILE_NOTIFY TITLE="{title}" MESSAGE="{message}" LINK="{link}"
  WEB_PROMPT TITLE="{title}" MESSAGE="{message}" LINK="{link}" T={t}

# MMMS_START: Initializes the 3MS to the provided INITIAL_TOOL. Use in your PRINT_START macro.
[gcode_macro MMMS_START]
gcode:
  CLEAR_TOOL
  {% set initial_tool = params.INITIAL_TOOL|int %}
  {% set fsensor_delay = printer["gcode_macro MMMS_SETTINGS"].fsensor_delay|int %}
  M118 3MS Start 
  M118    Initial Tool: T{initial_tool}
  CHECK_FSENSOR V=0 T={initial_tool} P=-1
  SYNC_TOOL TOOL={initial_tool}
  DISABLE_FSENSOR
  MMMS_LOAD
  G4 P{fsensor_delay}
  ENABLE_FSENSOR
  G4 P{fsensor_delay}
  CHECK_FSENSOR V=1 T={initial_tool} P=-1
  SAVE_VARIABLE VARIABLE=p VALUE={initial_tool}

# MMMS_END: Unloads the 3MS. Use in your PRINT_END macro.
[gcode_macro MMMS_END]
gcode:
  {% set current_tool = printer.save_variables.variables.p|default(-1)|int %}
  {% set fsensor_delay = printer["gcode_macro MMMS_SETTINGS"].fsensor_delay|int %}
  CLEAR_TOOL
  M118 3MS End
  {% if current_tool > -1 %}
    SYNC_TOOL TOOL={current_tool}
    G4 P{fsensor_delay/2}
    DISABLE_FSENSOR
    MMMS_UNLOAD
    G4 P{fsensor_delay}
  {% endif %}
  ENABLE_FSENSOR
  G4 P{fsensor_delay}
  CHECK_FSENSOR V=0 T=-1 P={current_tool}
  ENABLE_FSENSOR

# Unloads 3MS by provided/default DISTANCE, SPEED, in 50mm increments
[gcode_macro MMMS_UNLOAD]
gcode:
  {% set distance = params.DISTANCE|default(printer["gcode_macro MMMS_SETTINGS"].unload_distance)|int %}
  {% set speed = params.SPEED|default(printer["gcode_macro MMMS_SETTINGS"].unload_speed)|int %}
  {% set step_size = printer["gcode_macro MMMS_SETTINGS"].step_size %}
  {% set times = (distance // step_size)|int %}
  M83
  {% for _ in range(times) %}
    G1 E-{step_size} F{speed}
  {% endfor %}
  G1 E-{distance - (times * step_size)} F{speed}

# Loads 3MS by provided/default DISTANCE, SPEED, in 50mm incremenents
[gcode_macro MMMS_LOAD]
gcode:
  {% set distance = params.DISTANCE|default(printer["gcode_macro MMMS_SETTINGS"].load_distance)|int %}
  {% set speed = params.SPEED|default(printer["gcode_macro MMMS_SETTINGS"].load_speed)|int %}
  {% set step_size = printer["gcode_macro MMMS_SETTINGS"].step_size %}
  {% set times = (distance // step_size)|int %}
  M83
  {% for _ in range(times) %}
    G1 E{step_size} F{speed}
  {% endfor %}
  G1 E{distance - (times * step_size)} F{speed}

[gcode_macro Toolchange]
gcode:
  {% set p = printer.save_variables.variables.p|default(-1)|int %}
  {% set fsensor_delay = printer["gcode_macro MMMS_SETTINGS"].fsensor_delay|int %}
  {% set t = params.T|int %}
  M118 T{p} -> T{t}
  {% if p != t %}
    {% if p > -1 %}
      DISABLE_FSENSOR
      G4 P{fsensor_delay/2}
      MMMS_UNLOAD
      DESYNC_TOOL TOOL={p}
      G4 P{fsensor_delay}
      ENABLE_FSENSOR
      G4 P{fsensor_delay}
      CHECK_FSENSOR V=0 T={t} P={p}
    {% endif %}
    SYNC_TOOL TOOL={t}
    MMMS_LOAD
    G4 P{fsensor_delay}
    ENABLE_FSENSOR
    DISABLE_FSENSOR
    G4 P{fsensor_delay}
    ENABLE_FSENSOR
    G4 P{fsensor_delay}
    CHECK_FSENSOR V=1 T={t} P={p} R=4
  {% endif %}
  SAVE_VARIABLE VARIABLE=p VALUE={t}

[gcode_macro ENABLE_FSENSOR]
gcode:
  {% set fsensor = printer["gcode_macro MMMS_SETTINGS"].fsensor_name %}
  SET_FILAMENT_SENSOR SENSOR={fsensor} ENABLE=1

[gcode_macro DISABLE_FSENSOR]
gcode:
  {% set fsensor = printer["gcode_macro MMMS_SETTINGS"].fsensor_name %}
  SET_FILAMENT_SENSOR SENSOR={fsensor} ENABLE=0

# Check filament sensor "fsensor" to match with provided V. Else notify the user and PAUSE.
[gcode_macro CHECK_FSENSOR]
gcode:
  {% set v = params.V|int %}
  {% set msg = params.MSG|string %}
  {% set r = params.R|default(0)|int %}
  {% set retry_dist = printer["gcode_macro MMMS_SETTINGS"].retry_dist %}
  {% set retry_speed = printer["gcode_macro MMMS_SETTINGS"].retry_speed %}
  {% set fsensor_delay = printer["gcode_macro MMMS_SETTINGS"].fsensor_delay %}
  {% set fsensor = printer["gcode_macro MMMS_SETTINGS"].fsensor_name %}
  {% set t = params.T %}
  {% set p = params.P %}
  {% if v == 1 %}
    {% set type="LOAD" %}
  {% else %}
    {% set type="UNLOAD" %}
  {% endif %}
  {% if (printer["filament_switch_sensor "+(fsensor|string)].filament_detected|int) != v %}
    {% if r != 0 %}
      M117 Retry
      M83
      {% if r > 0 %}
        G1 E{retry_dist} F{retry_speed}
        {% set new_r = r - 1 %}
      {% else %}
        G1 E-{retry_dist} F{retry_speed}
        {% set new_r = r + 1 %}
      {% endif %}
      ENABLE_FSENSOR
      DISABLE_FSENSOR
      ENABLE_FSENSOR
      G4 P{fsensor_delay}
      CHECK_FSENSOR V={v} T={t} P={p} R={new_r}
    {% else %}
    MMMS_NOTIFY T={t} P={p} TYPE={type}
    PAUSE
    {% endif %}
  {% endif %}

# Set the sync of provided TOOL to SYNC with extruder
### --- Comment if using the 3MS instead of your printer's extruder --- ###
[gcode_macro SET_TOOL_SYNC]
gcode:
  {% set tool = params.TOOL|int %}
  {% set sync = params.SYNC|int %}
  {% set motion_queue = "extruder" if sync == 1 else "" %}
  SYNC_EXTRUDER_MOTION EXTRUDER=3ms{ tool } MOTION_QUEUE={ motion_queue }
  {% if sync == 1 %}
    SAVE_VARIABLE VARIABLE=synced VALUE={tool}
  {% endif %}
### --- Uncomment if using the 3MS instead of your printer's extruder --- ###
# [gcode_macro SET_TOOL_SYNC]
# gcode:
#   {% set tool = params.TOOL|int %}
#   {% set sync = params.SYNC|int %}
#   {% set ext_name = "3ms"+(tool|str) %}
#   {% if tool == 0 %}
#     {% set ext_name = "extruder" %}
#   {% endif %}
#   {% set motion_queue = "extruder" if sync == 1 else "" %}
#   SYNC_EXTRUDER_MOTION EXTRUDER={ext_name} MOTION_QUEUE={ motion_queue }
#   {% if sync == 1 %}
#     SAVE_VARIABLE VARIABLE=synced VALUE={tool}
#   {% endif %}

# Desync all tools, then sync provided TOOL to extruder
[gcode_macro SYNC_TOOL]
gcode:
  {% set tool = params.TOOL|int %}
  {% set num_tools = printer["gcode_macro MMMS_SETTINGS"].num_tools|int %}
  {% for t in range(num_tools) %}
    {% if t != tool %}
      DESYNC_TOOL TOOL={t}
    {% endif %}
  {% endfor %}
  SET_TOOL_SYNC TOOL={tool} SYNC=1

# Sync to current tool on Klipper startup
[delayed_gcode sync_startup]
initial_duration: 1.
gcode:
  {% set p = printer.save_variables.variables.p|default(-1)|int %}
  {% if p > -1 %}
    SYNC_TOOL TOOL={p}
  {% else %}
    DESYNC_ALL_TOOLS
  {% endif %}

# Desync provided TOOL from the extruder
[gcode_macro DESYNC_TOOL]
gcode:
  {% set tool = params.TOOL|int %}
  SET_TOOL_SYNC TOOL={tool} SYNC=0
  SAVE_VARIABLE VARIABLE=synced VALUE=-1

# Set previous to -1 (no filament loaded)
[gcode_macro CLEAR_TOOL]
gcode:
  SAVE_VARIABLE VARIABLE=p VALUE=-1

# Desync all tools from the extruder
[gcode_macro DESYNC_ALL_TOOLS]
gcode:
  {% set num_tools = printer["gcode_macro MMMS_SETTINGS"].num_tools|int %}
  {% for tool in range(num_tools) %}
    DESYNC_TOOL TOOL={tool}
  {% endfor %}
  SAVE_VARIABLE VARIABLE=synced VALUE=-1
